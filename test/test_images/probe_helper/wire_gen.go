// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/google/knative-gcp/pkg/utils/clients"
	"github.com/google/knative-gcp/test/test_images/probe_helper/probe"
	"github.com/google/knative-gcp/test/test_images/probe_helper/probe/handlers"
	"time"
)

// Injectors from wire.go:

func InitializeProbeHelper(ctx context.Context, brokerCellBaseUrl string, projectID clients.ProjectID, cronStaleDuration time.Duration, helperEnv probe.EnvConfig, forwardPort probe.ForwardPort, receivePort probe.ReceivePort) (*probe.Helper, error) {
	forwardClientOptions := probe.NewCeForwardClientOptions(forwardPort)
	ceForwardClient, err := probe.NewCeForwardClient(forwardClientOptions)
	if err != nil {
		return nil, err
	}
	brokerE2EDeliveryProbe := handlers.NewBrokerE2EDeliveryProbe(brokerCellBaseUrl, ceForwardClient)
	client, err := probe.NewPubSubClient(ctx, projectID)
	if err != nil {
		return nil, err
	}
	cePubSubClient, err := probe.NewCePubSubClient(ctx, client)
	if err != nil {
		return nil, err
	}
	cloudPubSubSourceProbe := handlers.NewCloudPubSubSourceProbe(cePubSubClient)
	storageClient, err := probe.NewStorageClient(ctx)
	if err != nil {
		return nil, err
	}
	cloudStorageSourceProbe := handlers.NewCloudStorageSourceProbe(storageClient)
	cloudStorageSourceCreateProbe := &handlers.CloudStorageSourceCreateProbe{
		CloudStorageSourceProbe: cloudStorageSourceProbe,
	}
	cloudStorageSourceUpdateMetadataProbe := &handlers.CloudStorageSourceUpdateMetadataProbe{
		CloudStorageSourceProbe: cloudStorageSourceProbe,
	}
	cloudStorageSourceArchiveProbe := &handlers.CloudStorageSourceArchiveProbe{
		CloudStorageSourceProbe: cloudStorageSourceProbe,
	}
	cloudStorageSourceDeleteProbe := &handlers.CloudStorageSourceDeleteProbe{
		CloudStorageSourceProbe: cloudStorageSourceProbe,
	}
	cloudAuditLogsSourceProbe := handlers.NewCloudAuditLogsSourceProbe(projectID, client)
	kubernetesInterface, err := probe.NewK8sClient(ctx)
	if err != nil {
		return nil, err
	}
	apiServerSourceProbe := handlers.NewApiServerSourceProbe(projectID, kubernetesInterface)
	apiServerSourceCreateProbe := &handlers.ApiServerSourceCreateProbe{
		ApiServerSourceProbe: apiServerSourceProbe,
	}
	apiServerSourceUpdateProbe := &handlers.ApiServerSourceUpdateProbe{
		ApiServerSourceProbe: apiServerSourceProbe,
	}
	apiServerSourceDeleteProbe := &handlers.ApiServerSourceDeleteProbe{
		ApiServerSourceProbe: apiServerSourceProbe,
	}
	cloudSchedulerSourceProbe := handlers.NewCloudSchedulerSourceProbe(cronStaleDuration)
	pingSourceProbe := handlers.NewPingSourceProbe(cronStaleDuration)
	eventTypeProbe := handlers.NewEventTypeHandler(brokerE2EDeliveryProbe, cloudPubSubSourceProbe, cloudStorageSourceCreateProbe, cloudStorageSourceUpdateMetadataProbe, cloudStorageSourceArchiveProbe, cloudStorageSourceDeleteProbe, cloudAuditLogsSourceProbe, apiServerSourceCreateProbe, apiServerSourceUpdateProbe, apiServerSourceDeleteProbe, cloudSchedulerSourceProbe, pingSourceProbe)
	livenessChecker := handlers.NewLivenessChecker(cloudSchedulerSourceProbe, pingSourceProbe)
	receiveClientOptions := probe.NewCeReceiverClientOptions(receivePort)
	ceReceiveClient, err := probe.NewCeReceiverClient(ctx, livenessChecker, receiveClientOptions)
	if err != nil {
		return nil, err
	}
	helper := probe.NewHelper(helperEnv, eventTypeProbe, ceForwardClient, ceReceiveClient, livenessChecker)
	return helper, nil
}
