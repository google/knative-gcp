// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//go:build !wireinject
// +build !wireinject

package handler

import (
	"cloud.google.com/go/pubsub"
	"context"
	"github.com/google/knative-gcp/pkg/broker/config"
	"github.com/google/knative-gcp/pkg/metrics"
)

// Injectors from wire.go:

func InitializeTestFanoutPool(ctx context.Context, podName metrics.PodName, containerName metrics.ContainerName, targets config.ReadonlyTargets, pubsubClient *pubsub.Client, opts ...Option) (*FanoutPool, error) {
	client := _wireClientValue
	v := _wireValue
	retryClient, err := NewRetryClient(ctx, pubsubClient, v...)
	if err != nil {
		return nil, err
	}
	deliveryReporter, err := metrics.NewDeliveryReporter(podName, containerName)
	if err != nil {
		return nil, err
	}
	fanoutPool, err := NewFanoutPool(targets, pubsubClient, client, retryClient, deliveryReporter, opts...)
	if err != nil {
		return nil, err
	}
	return fanoutPool, nil
}

var (
	_wireClientValue = DefaultHTTPClient
	_wireValue       = DefaultCEClientOpts
)

func InitializeTestRetryPool(targets config.ReadonlyTargets, podName metrics.PodName, containerName metrics.ContainerName, pubsubClient *pubsub.Client, opts ...Option) (*RetryPool, error) {
	client := _wireHttpClientValue
	deliveryReporter, err := metrics.NewDeliveryReporter(podName, containerName)
	if err != nil {
		return nil, err
	}
	retryPool, err := NewRetryPool(targets, pubsubClient, client, deliveryReporter, opts...)
	if err != nil {
		return nil, err
	}
	return retryPool, nil
}

var (
	_wireHttpClientValue = DefaultHTTPClient
)
