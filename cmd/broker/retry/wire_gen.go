// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/google/knative-gcp/pkg/broker/config/volume"
	"github.com/google/knative-gcp/pkg/broker/handler"
	"github.com/google/knative-gcp/pkg/metrics"
	"github.com/google/knative-gcp/pkg/utils/clients"
)

// Injectors from wire.go:

func InitializeSyncPool(ctx context.Context, projectID clients.ProjectID, podName metrics.PodName, containerName metrics.ContainerName, targetsVolumeOpts []volume.Option, opts ...handler.Option) (*handler.RetryPool, error) {
	readonlyTargets, err := volume.NewTargetsFromFile(targetsVolumeOpts...)
	if err != nil {
		return nil, err
	}
	client, err := clients.NewPubsubClient(ctx, projectID)
	if err != nil {
		return nil, err
	}
	httpClient := _wireClientValue
	deliveryReporter, err := metrics.NewDeliveryReporter(podName, containerName)
	if err != nil {
		return nil, err
	}
	retryPool, err := handler.NewRetryPool(readonlyTargets, client, httpClient, deliveryReporter, opts...)
	if err != nil {
		return nil, err
	}
	return retryPool, nil
}

var (
	_wireClientValue = handler.DefaultHTTPClient
)
